{"version":3,"sources":["components/App.js","index.js"],"names":["App","porps","sendToPeer","messageType","payload","socket","emit","socketID","id","createOffer","console","log","pc","offerToReceiveVideo","then","sdp","setLocalDescription","e","createAnswer","localVideoRef","React","createRef","remoteVideoRef","candidates","this","io","path","query","on","success","textref","value","JSON","stringify","setRemoteDescription","RTCSessionDescription","candidate","addCandidate","RTCIceCandidate","RTCPeerConnection","urls","onicecandidate","onconnectionstatechange","onaddstream","current","srcObject","stream","navigator","mediaDevices","getUserMedia","video","window","localStream","addStream","catch","className","ref","autoPlay","onClick","Component","ReactDOM","render","document","getElementById"],"mappings":"4QAmJeA,G,wDA9Ib,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA2ERC,WAAa,SAACC,EAAaC,GACzB,EAAKC,OAAOC,KAAKH,EAAa,CAC5BI,SAAU,EAAKF,OAAOG,GACtBJ,aA/Ee,EAoFnBK,YAAc,WACZC,QAAQC,IAAI,SACZ,EAAKC,GAAGH,YAAY,CAACI,oBAAqB,IACvCC,MAAK,SAAAC,GACJ,EAAKH,GAAGI,oBAAoBD,GAC5B,EAAKb,WAAW,gBAAgBa,MAChC,SAAAE,QA1Fa,EAkGnBC,aAAe,WACbR,QAAQC,IAAI,UACZ,EAAKC,GAAGM,aAAa,CAACL,oBAAqB,IAC1CC,MAAK,SAAAC,GACJ,EAAKH,GAAGI,oBAAoBD,GAC5B,EAAKb,WAAW,gBAAiBa,MACjC,SAAAE,QAtGF,EAAKE,cAAgBC,IAAMC,YAC3B,EAAKC,eAAiBF,IAAMC,YAC5B,EAAKhB,OAAS,KACd,EAAKkB,WAAa,GALD,E,gEAQC,IAAD,OAEjBC,KAAKnB,OAASoB,IAAG,cAAc,CAC3BC,KAAM,UACNC,MAAO,KAIXH,KAAKnB,OAAOuB,GAAG,sBAAsB,SAAAC,GACnCnB,QAAQC,IAAIkB,MAGdL,KAAKnB,OAAOuB,GAAG,iBAAiB,SAACb,GAC/B,EAAKe,QAAQC,MAAQC,KAAKC,UAAUlB,GACpC,EAAKH,GAAGsB,qBAAqB,IAAIC,sBAAsBpB,OAGzDS,KAAKnB,OAAOuB,GAAG,aAAa,SAACQ,GAE3B,EAAKxB,GAAGyB,aAAa,IAAIC,gBAAgBF,OAgB3CZ,KAAKZ,GAAK,IAAI2B,kBAXI,CAChB,WAAc,CAIZ,CACEC,KAAM,mCAOZhB,KAAKZ,GAAG6B,eAAiB,SAACxB,GACrBA,EAAEmB,WACH,EAAKlC,WAAW,YAAYe,EAAEmB,YAIlCZ,KAAKZ,GAAG8B,wBAA0B,SAACzB,GACjCP,QAAQC,IAAIM,IAGdO,KAAKZ,GAAG+B,YAAc,SAAC1B,GACrB,EAAKK,eAAesB,QAAQC,UAAY5B,EAAE6B,QAc5CC,UAAUC,aAAaC,aADJ,CAAEC,OAAO,IAEzBpC,MAZa,SAACgC,GACfK,OAAOC,YAAcN,EACrB,EAAK3B,cAAcyB,QAAQC,UAAYC,EACvC,EAAKlC,GAAGyC,UAAUP,MAUjBQ,OAPa,SAACrC,GACfP,QAAQC,IAAI,sBAAuBM,Q,+BAmD9B,IAAD,OACN,OACE,yBAAKsC,UAAU,UACb,sCACA,2BACEC,IAAKhC,KAAKL,cACVsC,UAAQ,IAEV,2BACED,IAAKhC,KAAKF,eACVmC,UAAQ,IAEV,6BACA,4BAAQC,QAASlC,KAAKf,aAAtB,SACA,4BAAQiD,QAASlC,KAAKN,cAAtB,UACA,6BACA,8BAAUsC,IAAK,SAAAA,GAAG,OAAI,EAAK1B,QAAU0B,KACrC,kC,GAvIUpC,IAAMuC,YCAxBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.8c461a28.chunk.js","sourcesContent":["import  React from 'react';\nimport io from 'socket.io-client';\nimport '../assets/videoChat.css';\n\nclass App extends React.Component{\n  constructor(porps) {\n    super(porps);\n    this.localVideoRef = React.createRef();\n    this.remoteVideoRef = React.createRef();\n    this.socket = null;\n    this.candidates = [];\n  }\n\n  componentDidMount(){\n    //RTCのコネクション作成ーーーーーーーーーーーーーーーーーー\n    this.socket = io('/webrtcPeer',{\n        path: '/webrtc',\n        query: {}\n    })\n\n    //接続完了\n    this.socket.on('connection-success', success => {\n      console.log(success);\n    })\n    //SDPを受け取る\n    this.socket.on('offerOrAnswer', (sdp) => {\n      this.textref.value = JSON.stringify(sdp);\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\n    })\n    //経路情報を受け取る\n    this.socket.on('candidate', (candidate) => {\n      // this.candidates = [...this.candidates, candidate ];\n      this.pc.addCandidate(new RTCIceCandidate(candidate));\n    })\n\n    //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー\n    \n    const pc_config = {\n      \"iceServers\": [\n        // {\n        //   //\n        // }\n        {\n          urls: 'stun:stun.l.google.com:19302'\n        }\n      ] \n    }\n\n    this.pc = new RTCPeerConnection(pc_config);\n\n    this.pc.onicecandidate = (e) => {\n      if(e.candidate){//自分のcandidateを取集後\n        this.sendToPeer('candidate',e.candidate);\n      }\n    }\n\n    this.pc.onconnectionstatechange = (e) => {\n      console.log(e);\n    }\n\n    this.pc.onaddstream = (e) => {\n      this.remoteVideoRef.current.srcObject = e.stream;\n    }\n\n    const success = (stream) => {\n      window.localStream = stream\n      this.localVideoRef.current.srcObject = stream\n      this.pc.addStream(stream)\n    }\n\n    const failure = (e) => { \n      console.log('getUserMedia Error:', e)\n    }\n\n    const constrains = { video: true };\n    navigator.mediaDevices.getUserMedia(constrains)\n      .then(success)\n      .catch(failure);\n  }\n\n  //WebSocketサーバーに送信\n  sendToPeer = (messageType, payload) => {\n    this.socket.emit(messageType, {\n      socketID: this.socket.id,\n      payload\n    })\n  }\n\n  //オファーの作成\n  createOffer = () => {\n    console.log('Offer');\n    this.pc.createOffer({offerToReceiveVideo: 1})\n      .then(sdp => {\n        this.pc.setLocalDescription(sdp);\n        this.sendToPeer('offerOrAnswer',sdp);\n      },e => {});\n  }\n\n  // setRemoteDescription = () => { \n  //   const desc = JSON.parse(this.textref.value)\n  //   this.pc.setRemoteDescription(new RTCSessionDescription(desc))\n  // }\n\n  createAnswer = () => {\n    console.log('Answer');\n    this.pc.createAnswer({offerToReceiveVideo: 1})\n    .then(sdp => {\n      this.pc.setLocalDescription(sdp)  \n      this.sendToPeer('offerOrAnswer', sdp)\n    },e => {});\n  }\n  \n  // addCandidate = () => {\n  //   // const candidate = JSON.parse(this.textref.value);\n  //   // console.log('Adding candidate:', candidate);\n  //   // this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n  //   this.candidates.forEach(candidate => {\n  //     console.log(JSON.stringify(candidate));\n  //     this.pc.addCandidate(new RTCIceCandidate(candidate));\n  //   })\n  // }\n\n  render(){\n    return(\n      <div className=\"stream\">\n        <h1>WebRTC</h1>\n        <video \n          ref={this.localVideoRef} \n          autoPlay\n        />\n        <video \n          ref={this.remoteVideoRef} \n          autoPlay\n        />\n        <br />\n        <button onClick={this.createOffer}>Offer</button>\n        <button onClick={this.createAnswer}>Answer</button>\n        <br />\n        <textarea ref={ref => this.textref = ref} />\n        <br />\n        {/* <button onClick={this.setRemoteDescription}>Set Remote Desc</button>\n        <button onClick={this.addCandidate}>add Candidate</button> */}\n      </div>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}